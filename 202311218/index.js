// 调整数组顺序使奇数位于偶数前面(一)
// 输入一个长度为 n 整数数组，实现一个函数来调整该数组中数字的顺序，使得所有的奇数位于数组的前面部分，所有的偶数位于数组的后面部分，并保证奇数和奇数，偶数和偶数之间的相对位置不变。

// 数据范围：，数组中每个数的值
// 要求：时间复杂度 ，空间复杂度
// 进阶：时间复杂度 ，空间复杂度

// 输入：[1,2,3,4]
// 输出：[1,3,2,4]

// 最小生成树
// 一个有 n 户人家的村庄，有 m 条路相互连接着。村里现在要修路，每条路都有一个成本价格，现在请你帮忙计算下，最少需要花费多少钱，就能让这 n 户人家连接起来。

//  为一个二维数组，每个元素是一个长度为 3 的一维数组  ，  和  表示村庄  和村庄  有一条路，修这条路的成本价格为  。

// 每户之间可能有多条道路连接，但不可能自己与自己相连。

// 数据范围:  ，  ，
// 进阶： 时间复杂度  ， 空间复杂度

// 3,3,[[1,3,3],[1,2,1],[2,3,1]]

// 2;

// 数字字符串转化成IP地址
// 现在有一个只包含数字的字符串，将该字符串转化成IP地址的形式，返回所有可能的情况。
// 例如：
// 给出的字符串为"25525522135",
// 返回["255.255.22.135", "255.255.221.35"]. (顺序没有关系)

// 数据范围：字符串长度
// 要求：空间复杂度 ,时间复杂度

// 注意：ip地址是由四段数字组成的数字序列，格式如 "x.x.x.x"，其中 x 的范围应当是 [0,255]。

// "25525522135"
// ["255.255.22.135","255.255.221.35"]
